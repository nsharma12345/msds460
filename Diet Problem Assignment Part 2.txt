from pulp import *

# Define the nutritional requirements (weekly)
nutrition_requirements = {
    'Sodium': 5000 * 7,  # mg
    'Energy': 2000 * 7,  # kcal
    'Protein': 50 * 7,    # g
    'Vitamin D': 20 * 7,  # mcg
    'Calcium': 1300 * 7,  # mg
    'Iron': 18 * 7,       # mg
    'Potassium': 4700 * 7  # mg
}

# Nutrition facts for the five packaged food items
# Each row represents a food item with its cost & nutritional content per serving
# Columns: Food item, Cost (per serving), Sodium, Energy, Protein, Vitamin D, Calcium, Iron, Potassium
food_items = [
    ['Lightlife tempeh', 1.52, 0, 160, 18, 0, 87, 2, 284],
    ['VitaCoco coconut water', 1.60, 60, 45, 0, 0, 34, 0, 470],
    ['Eggs', 0.87, 80, 80, 7, 1.1, 30, 1, 80],
    ['Horizon Organic Whole High Vitamin D Milk', 0.36, 135, 160, 8, 4.5, 310, 0, 410],
    ['Organic Tricolor Quinoa', 0.69, 0, 150, 6, 0, 20, 2, 240]
]

# Create a list of food item names
food_names = [item[0] for item in food_items]

# Create a dictionary to hold the cost of each food item
costs = {item[0]: item[1] for item in food_items}

# Create dictionaries to hold the nutritional content of each food item separately
nutritional_content = {item[0]: item[2:] for item in food_items}

# Create the 'prob' variable to contain the problem data
prob = LpProblem("Diet Problem", LpMinimize)

# Define decision variables
food_vars = LpVariable.dicts('Food', food_names, lowBound=0, cat='Continuous')

# Add objective function to minimize the total cost
prob += lpSum([costs[i] * food_vars[i] for i in food_names]), "Total Cost"

# Add constraints for each nutritional requirement
for nutrient, requirement in nutrition_requirements.items():
    if nutrient == 'Sodium':
        prob += lpSum([nutritional_content[item][list(nutrition_requirements.keys()).index(nutrient)] * food_vars[item] for item in food_names]) <= requirement, nutrient + "Maximum"
    else:
        prob += lpSum([nutritional_content[item][list(nutrition_requirements.keys()).index(nutrient)] * food_vars[item] for item in food_names]) >= requirement, nutrient + "Minimum"

# Add constraints to ensure at least one unit of each food item is included
for food in food_names:
    prob += food_vars[food] >= 1, "AtLeastOneUnit_" + food

# Solve the problem
prob.solve()

# Print the optimal diet plan
print("Optimal Diet Plan:")
for food in food_names:
    if food_vars[food].varValue > 0:
        print(food, ": ", food_vars[food].varValue)

# Print the total cost of the optimal diet
print("Total Cost of the Diet: $", value(prob.objective))